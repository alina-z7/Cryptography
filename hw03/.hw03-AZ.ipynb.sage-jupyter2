{"backend_state":"ready","kernel":"sage-10.1","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1708552417849,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.1"}},"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"108e45","input":"","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"18d9da","input":"","pos":11,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"2f9746","input":"","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"354145","input":"","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a3cfdd","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d769fd","input":"","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d8bddb","input":"","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":139,"id":"d5580c","input":"p = 17\nK_space = [1, 3, 5, 7, 9, 11, 13, 15]\nP_space = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nheader = \"k\\\\m | \" + \" \".join(\"{:>2}\".format(str(m)) for m in P_space) + \" | e: m -> m^k (mod p)\"\nprint(header)\nprint(\"-\"*(1+len(header)))\n\nC_space = set()\nfor k in K_space:\n    # build and print the encryption output, for a given key\n    # and extend the cipherspace set, as needed\n    row = [pow(m, k, p) for m in P_space]\n    C_space.update(row) \n    prow = \"{:>3} | \".format(str(k)) + \" \".join(\"{:>2}\".format(str(mk)) for mk in row) + \" |\"\n    print(prow)\nC_space","output":{"0":{"name":"stdout","output_type":"stream","text":"k\\m |  2  3  4  5  6  7  8  9 10 11 12 13 14 15 | e: m -> m^k (mod p)\n----------------------------------------------------------------------\n  1 |  2  3  4  5  6  7  8  9 10 11 12 13 14 15 |\n  3 |  8 10 13  6 12  3  2 15 14  5 11  4  7  9 |\n  5 | 15  5  4 14  7 11  9  8  6 10  3 13 12  2 |\n  7 |  9 11 13 10 14 12 15  2  5  3  7  4  6  8 |\n  9 |  2 14  4 12 11 10  8  9  7  6  5 13  3 15 |\n 11 |  8  7 13 11  5 14  2 15  3 12  6  4 10  9 |\n 13 | 15 12  4  3 10  6  9  8 11  7 14 13  5  2 |\n 15 |  9  6 13  7  3  5 15  2 12 14 10  4 11  8 |\n"},"1":{"data":{"text/plain":"{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}"},"exec_count":139,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":150,"id":"81b403","input":"# elgamal\n\nfor a in range(1, 23):\n    xx = set([pow(a,k,23) for k in range(23)])\n    print(a, len(xx), xx)","output":{"0":{"name":"stdout","output_type":"stream","text":"1 1 {1}\n2 11 {1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18}\n3 11 {1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18}\n4 11 {1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18}\n5 22 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n6 11 {1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18}\n7 22 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n8 11 {1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18}\n9 11 {1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18}\n10 22 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n11 22 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n12 11 {1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18}\n13 11 {1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18}\n14 22 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n15 22 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n16 11 {1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18}\n17 22 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n18 11 {1, 2, 3, 4, 6, 8, 9, 12, 13, 16, 18}\n19 22 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n20 22 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n21 22 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\n22 2 {1, 22}\n"}},"pos":6,"type":"cell"}
{"cell_type":"markdown","id":"0f3592","input":"## **P1:** Python Checkup, I\n\nWe need to talk about **encoding(\\*) and decoding.** (See Hoffstein, Section 1.7.2.) \n\n - Let us use Unicode UTF-8 encoding. ([See here](https://www.utf8-chartable.de/unicode-utf8-table.pl?number=128&names=2&utf8=string-literal) for a dictionary of printable and nonprintable characters.)\n\n - Converting these to decimal numbers, they are all less than 128, so let's pick a bigger prime (say $p=131$)\nFor all unassigned numbers (not appearing in the Unicode encoding scheme), let us associate them with \"$*_i$\" for the $i$-th non-specified character. By the same token, let us write $x_i$ for the UTF-8 literals that are non-printable characters. (Again, see [the dictionary](https://www.utf8-chartable.de/unicode-utf8-table.pl?number=128&names=2&utf8=string-literal).)\n\nTo see its use in practice, let us use an Affine cipher, with $e(m) = 3m+70$. What does the process look like? (_Warning:_ below I'm using an incorrect/completely-made-up encoding, just for illustrative purposes.) In practice there are four steps: encode, encrypt, decrypt, decode, which I show as four rows: input letter (*plaintext*), input number (\"plaintext\"), output number (\"ciphertext\"), output letter (*ciphertext*).\n\n```\n  a  b   c  d  e ...\n -------------------\n  1  2  20  4 22 ...\n 73 76 130 82  5 ...\n -------------------\n  p  X  *1  4 x5 ...\n```\n\nSo, if Bob sends \"badcab\", then Eve and Alice both see `(76, 73, 82, 130, 73, 76)` and both decode/read it as the message \"X p 4 *1 p X\". Of course, Alice knows how to first apply a decryption function before trying to decode/read it. So she will correctly see \"badcab\" when done.\n\n#### Your Tasks:\n\n1. Write \"let sleeping dogs lie\", including the spaces, as a string of Unicode numbers. (Use code to help you; learn about `ord` and `chr`.)\n\n\n2. Show me the (correct) encryption table for the full lowercase alphabet. (I don't need to see all four rows, as fake-shown above, just the first and last.)\n\n\n3. Encrypt the message in Part 1.\n\n---\n\n(\\*) The \"proper\" way to encode text is to assign characters to numbers in a such way that they are \"far apart\" when written in binary notation. E.g., the letter `A` might be encoded as `011000` while `B` might be encoded as `000101`. This allows for error detection during transmission. (_E.g._, suppose Bob sends `A`, but static in the transmission line causes the third digit to blip from `1` to `0`, so Alice receives `010000`. \"Hmm. that string is not in my lookup table,\"\" says Alice's computer. The computer tries to repair it... the received message is **three errors away** from `B` but only **one error away** from `A`. Assumig a not-very-noisy channel, Bob must have sent `A`.) But we won't worry about that for now.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"1d5e0a","input":"## **P3:** Near-Perfect Security?\n\nConsider the following private-key cryptosystem.\n\n - Bob and Alice agree on a prime modulus $p=17$ (public knowledge)\n\n - Bob and Alice agree that the key space $\\mathbb K$ should be a subset of $\\{1, 3, 5, 7, 9, 11, 13, 15\\}$, and the plaintext space $\\mathbb P$ should be a subset of $\\{2, 3, 4, 5, \\ldots, 13, 14, 15\\}$. \n \n- Once they agree on a particular key $k$ (privately), encryption proceeds as $e_k(m) = m^k \\pmod{17}$.\n \nBelow is the full range of possibilities.","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"2e2dca","input":"# Math/Comp 431\n\n``Graduate Students:`` submit solutions to all exercises in this collection *AND* in the `-331` section, plus the **Self Assessment** above.","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"3f3d2d","input":"#### Final Encryption Scheme Details\n\n- Suppose Bob and Alice agree to use each key with equal probability. \n- Also suppose the probability of messages `2` or `8` occuring is twice as likely as any other message. (But otherwise all probabilities are equal.)\n\n_Remember:_ $1 = \\sum_{m\\in \\mathbb P} \\mathrm{prob}(P=m)$.\n\n#### Your Tasks\n\nFor each of the options below,\n - if you are sure **it is** a perfectly secure system, explain why.\n - if you are sure **it is not** a perfectly secure system, explain why.\n - **otherwise** find, if possible, some plaintext $m\\in \\mathbb P$ satisfying $\\mathrm{prob}(C=c | P=m) \\neq \\mathrm{prob}(C=c).$\n\nExplore the case when:\n\n1.  `K_space = [5, 7, 9, 11]; P_space = [2, 8, 9]`\n\n2. `K_space = [5, 7, 9, 13]; P_space = [2, 8, 9]`\n\n3. `K_space = [3, 5, 7, 11]; P_space = [2, 4, 8, 9]`\n\n4. `K_space = [5, 7, 9, 11]; P_space = [2, 8, 9, 15]`\n","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"40f946","input":"## **P4:** CRT\n\nWork Hoffstein Exercise 2.18(b,c,d,e). \n\n*Remark.* Do (d) by hand. You are welcome to hunt for (and use) a Python package with a `CRT` function to help with the other parts.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"423ea3","input":"## **P0:** Self-Assessment\n\n`Undergraduate Students & Graduate Students:`\n\n- Please give resources used (and to what extent) on this homework assignment.\n\n - Name one problem that:\n\n    + you are sure about;\n\n    + you would like feedback on.\n\n - Look back at the definitions, theorems, concepts, and questions-of-the-week from the past two weeks. Place them into one of three columns.\n\n| happy: | :need review: | :unhappy |\n| --- | --- | --- |\n| prime number | ... | ... |\n\n\n - **Agree / Maybe / Disagree:** \n Next week, I should seek more help from my group members or Piazza, or [Drop in](https://appt.link/lauve-meetings) for a visit with my professor.","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"434388","input":"## **P5:** Near-Perfect Security?, Revisited\n\nLet's study ElGamal through the lens of perfect security. Since Bob reuses Alice's public key very often, you should treat his ephemeral keys as the key space.\nSuppose Bob and Alice have chosen to use $p=23$ and $g=6$.\n\n- Can you choose the message space and key space so that the resulting cipher space satisfies $\\#\\mathbb K = \\#\\mathbb C = \\#\\mathbb P $?\n- How about $\\#\\mathbb K \\geq \\#\\mathbb C \\geq \\#\\mathbb P $? \n\nAssume all messages and keys are equally likely. And fix a \"best-case\" choice of $\\mathbb K$ and $\\mathbb P$ from above.\n\n- Can you find one pair $(m,c)$ satisfying $\\mathrm{prob}(C=c|P=m) = \\mathrm{prob}(C=c)$?\n- How about $\\mathrm{prob}(C=c|P=m) \\neq \\mathrm{prob}(C=c)$?\n\n(A great deal of coding may be in order.)","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"9f44c1","input":"# Math/Comp 331\n\n``Undergraduate Students:`` submit solutions to all exercises in this collection, plus the **Self Assessment** above.\n\n**Important Notes.** \n\n- On problems that require some mathematical calculations, you may use markdown cells with $\\LaTeX{}$ or upload a PDF or PNG file. \n<br>\n(Be sure to indicate the file name if you don't import your solution directly beneath the problem statement.)\n\n- All functions you code in this class as part of your solutions should include a doc string (within triple-quotes). \n<br>(Additionally, particularly lengthy blocks of code should include a comment or two for the reader.)","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"ba2776","input":"<h1><b>Homework III</b></h1>\n\n<i>Introduction to Cryptography &ndash; Loyola University Chicago - Spring 2024</i>\n\n<div style=\"margin-top:32px;\">\n<font style=\"font-size: large;\">\n    <b>Name:</b> \n    your name here\n</font>\n\n<font style=\"font-size: large;\">\n    <b>Collaborators:</b> \n    (possibly other names here)\n</font>\n</div>","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"f3239e","input":"## **P2:** The ElGamal PKC\n\nAlice and Bob agree to use the prime $p = 1373$ and the base $g = 2$ for communications using the ElGamal public key cryptosystem.\n\n **a)** Alice chooses $a = 947$ as her private key. What is the value of her public key $A$?\n\n **b)** Bob chooses $b = 716$ as his private key, so his public key is $B = 2716 = 469 \\pmod{1373}$\n Alice encrypts the message $m = 583$ for Bob using the random element $k = 877$. What is the ciphertext $(c_1,c_2)$ that Alice sends to Bob?\n\n **c)** New month, new keys. Alice now uses private key $a = 299$ with public key $A$ being $2^{299} = 34 \\pmod{1373}$. Bob encrypts a message using Alice’s public key and sends her the ciphertext $(c_1,c_2) = (661,1325)$. Decrypt the message.\n\n **d)** Eve notices that Alice and Bob have not used a particularly large $p$ and that $g$ does not have a particularly large order in $\\mathbb F_p^*$. What DLP should she solve to in order to eavesdrop (and crack) all communications from Bob to Alice?\n\n **e)** Bob accidentally used the same ephemeral key 100 times in a row, and Eve intercepts $(2, x_1), (2, x_2), \\ldots, (2, x_{100})$. How might she use frequency analysis to decrypt all 100 of these messages?\n\n","pos":5,"type":"cell"}
{"id":0,"time":1708552396184,"type":"user"}
{"last_load":1708552396354,"type":"file"}