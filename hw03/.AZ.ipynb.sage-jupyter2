{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1708448175634,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.5"}},"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"900803","input":"### IMPORTANT NOTE ###\n#\n# In order to run this code, you should temporarily switch the kernel to `SageMath 10.1`\n# Leave whatever output you needed in order to solve the problem, then switch back to a Python kernel for subsequent problems.\n######################\n\nvar(x)\nK.<a> = GF(49, name='a', modulus=x^2 + 1)  # the vector space $K$ has basis \"1\" and \"a\", with scalars from F_7\nprint(a^2+1)\nprint((1+a)^3)","pos":19,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f42794","input":"","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"0f3592","input":"## **P1:** Python Checkup, I\n\nWe need to talk about **encoding(\\*) and decoding.** (See Hoffstein, Section 1.7.2.) \n\n - Let us use Unicode UTF-8 encoding. ([See here](https://www.utf8-chartable.de/unicode-utf8-table.pl?number=128&names=2&utf8=string-literal) for a dictionary of printable and nonprintable characters.)\n\n - Converting these to decimal numbers, they are all less than 128, so let's pick a bigger prime (say $p=131$)\nFor all unassigned numbers (not appearing in the Unicode encoding scheme), let us associate them with \"$*_i$\" for the $i$-th non-specified character. By the same token, let us write $x_i$ for the UTF-8 literals that are non-printable characters. (Again, see [the dictionary](https://www.utf8-chartable.de/unicode-utf8-table.pl?number=128&names=2&utf8=string-literal).)\n\nTo see its use in practice, let us use an Affine cipher, with $e(m) = 3m+70$. What does the process look like? (_Warning:_ below I'm using an incorrect/completely-made-up encoding, just for illustrative purposes.) In practice there are four steps: encode, encrypt, decrypt, decode, which I show as four rows: input letter (*plaintext*), input number (\"plaintext\"), output number (\"ciphertext\"), output letter (*ciphertext*).\n\n```\n  a  b   c  d  e ...\n -------------------\n  1  2  20  4 22 ...\n 73 76 130 82  5 ...\n -------------------\n  p  X  *1  4 x5 ...\n```\n\nSo, if Bob sends \"badcab\", then Eve and Alice both see `(76, 73, 82, 130, 73, 76)` and both decode/read it as the message \"X p 4 *1 p X\". Of course, Alice knows how to first apply a decryption function before trying to decode/read it. So she will correctly see \"badcab\" when done.\n\n#### Your Tasks:\n\n1. Write \"let sleeping dogs lie\", including the spaces, as a string of Unicode numbers. (Use code to help you; learn about `ord` and `chr`.)\n\n\n2. Show me the (correct) encryption table for the full lowercase alphabet. (I don't need to see all four rows, as fake-shown above, just the first and last.)\n\n\n3. Encrypt the message in Part 1.\n\n---\n\n(\\*) The \"proper\" way to encode text is to assign characters to numbers in a such way that they are \"far apart\" when written in binary notation. E.g., the letter `A` might be encoded as `011000` while `B` might be encoded as `000101`. This allows for error detection during transmission. (_E.g._, suppose Bob sends `A`, but static in the transmission line causes the third digit to blip from `1` to `0`, so Alice receives `010000`. \"Hmm. that string is not in my lookup table,\"\" says Alice's computer. The computer tries to repair it... the received message is **three errors away** from `B` but only **one error away** from `A`. Assumig a not-very-noisy channel, Bob must have sent `A`.) But we won't worry about that for now.","pos":0.8,"type":"cell"}
{"cell_type":"markdown","id":"1285bf","input":"## **P2:** The ElGamal PKC\n\nAlice and Bob agree to use the prime $p = 1373$ and the base $g = 2$ for communications using the ElGamal public key cryptosystem.\n\n **a)** Alice chooses $a = 947$ as her private key. What is the value of her public key $A$?\n\n **b)** Bob chooses $b = 716$ as his private key, so his public key is $B = 2716 = 469 \\pmod{1373}$\n Alice encrypts the message $m = 583$ for Bob using the random element $k = 877$. What is the ciphertext $(c_1,c_2)$ that Alice sends to Bob?\n\n **c)** New month, new keys. Alice now uses private key $a = 299$ with public key $A$ being $2^299 = 34 \\pmod{1373}$. Bob encrypts a message using Alice’s public key and sends her the ciphertext $(c_1,c_2) = (661,1325)$. Decrypt the message.\n\n **d)** Eve notices that Alice and Bob have not used a particularly large $p$ and that $g$ does not have a particularly large order in $\\mathbb F_p^*$. What DLP should she solve to in order to eavesdrop (and crack) all communications from Bob to Alice?\n\n **e)** Bob accidentally used the same ephemeral key 100 times in a row, and Eve intercepts $(2, x_1), (2, x_2), \\ldots, (2, x_{100})$. How might she use frequency analysis to decrypt all 100 of these messages?","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"2ce35c","input":"## **P3:** CRT\n\nWork Hoffstein Exercise 2.18(b,c,d,e). \n\n*Remark.* Do (d) by hand. You are welcome to hunt for (and use) a Python package with a `CRT` function to help with the other parts.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"423ea3","input":"## **P0:** Self-Assessment\n\n`Undergraduate Students & Graduate Students:`\n\n- Please give resources used (and to what extent) on this homework assignment.\n\n - Name one problem that:\n\n    + you are sure about;\n\n    + you would like feedback on.\n\n - Look back at the definitions, theorems, concepts, and questions-of-the-week from the past two weeks. Place them into one of three columns.\n\n| happy: | :need review: | :unhappy |\n| --- | --- | --- |\n| prime number | ... | ... |\n\n\n - **Agree / Maybe / Disagree:** \n Next week, I should seek more help from my group members or Piazza, or [Drop in](https://appt.link/lauve-meetings) for a visit with my professor.","pos":0.4,"type":"cell"}
{"cell_type":"markdown","id":"48094d","input":"## **P5:** DLP over Finite Fields\n\n1. Work Hoffstein Exercise 2.39. You may wish to run the code below to assist you. \n\n2. Find the abstract of *On the discrete logarithm problem in finite fields of fixed characteristic*, R.Granger, T.Kleinjung, J.Zumbrägel, Transactions AMS (2015) and discuss why/how this is relevant.","pos":7.833333333333334,"type":"cell"}
{"cell_type":"markdown","id":"9f44c1","input":"# Math/Comp 331\n\n``Undergraduate Students:`` submit solutions to all exercises in this collection, plus the **Self Assessment** above.\n\n**Important Notes.** \n\n- On problems that require some mathematical calculations, you may use markdown cells with $\\LaTeX{}$ or upload a PDF or PNG file. \n<br>\n(Be sure to indicate the file name if you don't import your solution directly beneath the problem statement.)\n\n- All functions you code in this class as part of your solutions should include a doc string (within triple-quotes). \n<br>(Additionally, particularly lengthy blocks of code should include a comment or two for the reader.)","pos":0.6000000000000001,"type":"cell"}
{"cell_type":"markdown","id":"a5cf22","input":"# Math/Comp 431\n\n``Graduate Students:`` submit solutions to all exercises in this collection *AND* in the `-331` section, plus the **Self Assessment** above.","pos":7.666666666666667,"type":"cell"}
{"cell_type":"markdown","id":"aa6c23","input":"## **P5:** DLP over Finite Fields\n\nWe should talk about larger finite fields. (It is customary to break messages into blocks and encode each letter as the coefficient of $x^i$ in some polynomial. E.g.,\n\nComplete the entries in this multiplication table.\n\n<img src=\"mult_table F2[x]-mod(x3+x+1).png\"/>","pos":7.583333333333334,"type":"cell"}
{"cell_type":"markdown","id":"ba2776","input":"<h1><b>Homework III</b></h1>\n\n<i>Introduction to Cryptography &ndash; Loyola University Chicago - Spring 2024</i>\n\n<div style=\"margin-top:32px;\">\n<font style=\"font-size: large;\">\n    <b>Name:</b> \n    your name here\n</font>\n\n<font style=\"font-size: large;\">\n    <b>Collaborators:</b> \n    (possibly other names here)\n</font>\n</div>","pos":0.2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ba53c5","input":"<h4><div style=\"font-style: italic; color:#fff; background:#aaa; padding:10px 0px 10px 5px;\">\n4. (By analog with DLP) \"The SQRP\"\n</div></h4>\n\nThe Pohlig-Hellman Algorithm shows us that in the DLP, when choosing a large integer $N$ (and element $g$ with that order), we ought to make $N$ prime. \nHere, I ask you to outline the analogous steps for the \"Square-Root Problem\": \n\n<p align=\"center\">\n    <i>Given modulus $M$ and integer $a$, find $x$ so that $x^2=a$.</i>\n</p>\n\n1. Read Hoffstein's Example 2.28, and **recast** it as an algorithm. (No need to assume that the primes involved are congruent to 3 mod 4; but it is necessary to assume square roots can be found.) Ideally, we should explain it for $M=p_1^{e_1}p_2^{e_2}\\cdots p_t^{e_t}$ (see Exercise 2.24 for how that might go), but let's *just assume* $M=p_1p_2p_3$.\n\n2. **Prove** that your algorithm produces a valid solution $x$ to the SQRP.","pos":7,"type":"cell"}
{"id":"2f9746","input":"","pos":1,"type":"cell"}
{"id":"354145","input":"","pos":6.5,"type":"cell"}
{"id":"69cefd","input":"","pos":1.6,"type":"cell"}
{"id":"81b403","input":"","pos":1.2000000000000002,"type":"cell"}
{"id":"a30a3d","input":"","pos":13.416666666666668,"type":"cell"}
{"id":"a3cfdd","input":"","pos":2.4,"type":"cell"}
{"id":"d8bddb","input":"","pos":5.5,"type":"cell"}
{"id":"de4358","input":"","pos":7.625,"type":"cell"}
{"id":"f3db4b","input":"","pos":7.5,"type":"cell"}
{"id":0,"time":1708445027882,"type":"user"}
{"last_load":1708448200569,"type":"file"}